configuration_model <- function(a){
g <- sample_degseq(rep(2,100), method="vl")
#return(as_edgelist(g))
return(12353)
}
a  = configuration_model(1)
## The vl generator
library(igraph)
configuration_model <- function(a){
g <- sample_degseq(rep(2,100), method="vl")
#return(as_edgelist(g))
return(12353)
}
a  = configuration_model(1)
library(igraph)
## The vl generator
library(igraph)
configuration_model <- function(a){
g <- sample_degseq(rep(2,100), method="vl")
#return(as_edgelist(g))
return(12353)
}
a  = configuration_model(1)
return(as_edgelist(g))
#return(12353)
}
return(as_edgelist(g))
g <- sample_degseq(rep(2,100), method="vl")
as_edgelist(g)
a  = configuration_model(1)
a  = configuration_model()
configuration_model <- function(){
g <- sample_degseq(rep(2,100), method="vl")
return(as_edgelist(g))
}
a  = configuration_model()
cx = source_python('Complexity.py')
library(reticulate)
install.packages("reticulate")
library("reticulate")
library("reticulate")
install.packages("reticulate")
library("reticulate")
library("reticulate")
library(igraph)
configuration_model <- function(a){
g <- sample_degseq(rep(2,100), method="vl")
return(as_edgelist(g))
}
install.packages("reticulate")
library("reticulate")
library(igraph)
configuration_model <- function(a){
g <- sample_degseq(rep(2,100), method="vl")
return(as_edgelist(g))
}
source_python("construct_network.py")
n
#include necessary libraries, and setting up the environment
library("reticulate")
library("igraph")
use_python("/zhaoy/anaconda3")
#function1 return the edges list to build the network in networkx
#function2 return the graph itself for testing in the R environment
configuration_model <- function(series){
g <- sample_degseq(series, method="vl")
return(as_edgelist(g))
}
return_graph<- function(series){
g <- sample_degseq(series, method="vl")
return(g)
}
#python functions
construct_network = source_python("construct_network.py")
cx = source_python("OdC.py")
power_law_generator = source_python("power_law_series.py")
#Building the network in python
n = 50
gamma = 3
gamma_list = seq(gamma-0.5,gamma+0.5,0.01)
results = list()
graphs = list()
for(i in gamma_list){
series = power_law_series(n,i)
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   OdC(g)
results = append(results,result)
}
#Calculating the complexity
#OdC(g)
plot(gamma_list,results)
load("~/Documents/.RData")
source("~/Documents/GitHub/Project/test.R")
setwd("~/")
source("~/Documents/GitHub/Project/test.R")
setwd("~/Documents/GitHub/Project")
source("~/Documents/GitHub/Project/test.R")
source("~/Documents/GitHub/Project/test.R")
View(G)
library("reticulate")
library("reticulate")
library("igraph")
use_python("/zhaoy/anaconda3")
test = source_python("test_support.py")
G = test_support()
G = test_support()
G = test_support()
library("reticulate")
