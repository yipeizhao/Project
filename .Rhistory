return_graph<- function(series){
g <- sample_degseq(series, method="vl")
return(g)
}
#python functions
construct_network = source_python("construct_network.py")
cx = source_python("OdC.py")
power_law_generator = source_python("power_law_series.py")
#Building the network in python
n = 50
gamma = 3
gamma_list = seq(gamma-0.5,gamma+0.5,0.01)
results = list()
graphs = list()
for(i in gamma_list){
series = power_law_series(n,i)
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   OdC(g)
results = append(results,result)
}
#Calculating the complexity
#OdC(g)
plot(gamma_list,results)
load("~/Documents/.RData")
source("~/Documents/GitHub/Project/configuration_model.r")
setwd("~/Documents/GitHub/Project")
source("~/Documents/GitHub/Project/configuration_model.r")
source("~/Documents/GitHub/Project/configuration_model.r")
source("~/Documents/GitHub/Project/configuration_model.r")
source("~/Documents/GitHub/Project/configuration_model.r")
n = 100
gamma = 3
gamma_list = seq(gamma-0.3,gamma+0.3,0.01)
results = list()
graphs = list()
for(i in gamma_list){
#print(i)
series = power_law_series(n,i)
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results = append(results,result)
}
#Calculating the complexity
#OdC(g)
plot(gamma_list,results)
title("MAri")
#include necessary libraries, and setting up the environment
library("reticulate")
library("igraph")
use_python("/zhaoy/anaconda3")
#function1 return the edges list to build the network in networkx
#function2 return the graph itself for testing in the R environment
configuration_model <- function(series){
g <- sample_degseq(series, method="vl")
return(as_edgelist(g))
}
return_graph<- function(series){
g <- sample_degseq(series, method="vl")
return(g)
}
#python functions
power_law_generator = source_python("power_law_series.py")
construct_network = source_python("construct_network.py")
cx = source_python("MAri.py")
cx = source_python("OdC.py")
results = list(0)*len(gamma_list)
results = list(0)*lengths(gamma_list)
#Building the network in python
n = 100
results = list(rep(0, lengths(gamma_list)))
lengths(gamma_list)
length(gamma_list)
results = list(rep(0, length(gamma_list)))
results = list(rep(0, length(gamma_list)))
View(results)
results[0]=0
results[0]=1
results
results[[0]=1
results[[0]]=1
results[0]=
results[0]
results[0]
results[0][0]
results = list()
for(i in gamma_list){
results = append(results,0)
}
View(results)
results[0]
results[1]
results[1]=1
results[1]
n = 100
gamma = 3
gamma_list = seq(gamma-0.3,gamma+0.3,0.01)
results = list()
for(i in gamma_list){
results = append(results,0)
}
graphs = list()
for(n in 1:100){
for(i in gamma_list){
#print(i)
series = power_law_series(n,i)
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results = append(results,result)
}
}
n = 100
gamma = 3
gamma_list = seq(gamma-0.3,gamma+0.3,0.01)
results = list()
for(i in gamma_list){
results = append(results,0)
}
graphs = list()
for(n in 1:100){
for(i in gamma_list){
#print(i)
series = power_law_series(n,i)
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results = append(results,result)
}
}
n = 100
gamma = 3
gamma_list = seq(gamma-0.2,gamma+0.2,0.01)
results = list()
for(i in gamma_list){
results = append(results,0)
}
graphs = list()
for(n in 1:100){
for(i in gamma_list){
#print(i)
series = power_law_series(n,i)
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results = append(results,result)
}
}
n = 100
gamma = 3
gamma_list = seq(gamma-0.1,gamma+0.1,0.01)
results = list()
for(i in gamma_list){
results = append(results,0)
}
graphs = list()
for(n in 1:100){
for(i in gamma_list){
#print(i)
series = power_law_series(n,i)
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results = append(results,result)
}
}
n = 100
gamma = 3
gamma_list = seq(gamma-0.1,gamma+0.1,0.01)
results = list()
for(i in gamma_list){
results = append(results,0)
}
graphs = list()
for(n in 1:100){
for(i in 1:length(gamma_list)){
#print(i)
series = power_law_series(n,i)
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results[i] = results[i]+result
}
}
n = 100
gamma = 3
gamma_list = seq(gamma-0.3,gamma+0.3,0.01)
results = list()
for(i in gamma_list){
results = append(results,0)
}
graphs = list()
for(n in 1:100){
for(i in 1:length(gamma_list)){
#print(i)
series = power_law_series(n,i)
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results[i] = results[i]+result
}
}
for(n in 1:100){print(n)}
n
i
results
g
plot(g)
draw(g)
library(igraph)
library("igraph")
draw(g)
plot(g)
View(g)
result
results[i]=results[i]+result
results[i]=results[i]
results[i]=results[i]+result
type(results[i])
typeof(results[i])
View(results)
results[i]
results[i][0]
results[1]
typeof(results[1])
results[1]
typeof(gamma_list)
results = as.list(rep(0, length(gamma_list)))
results = as.list(rep(0, length(gamma_list)))
results = integer(length(gama_list))
results = integer(length(gamma_list))
n = 100
gamma = 3
gamma_list = seq(gamma-0.3,gamma+0.3,0.01)
results = integer(length(gamma_list))
graphs = list()
for(n in 1:100){
for(i in 1:length(gamma_list)){
#print(i)
series = power_law_series(n,i)
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results[i] = results[i]+result
}
}
power_law_series(100,2.7)
power_law_series(100,3)
edge_list = configuration_model(series)
View(edge_list)
View(g)
nx.draw(g)
graph_from_edgelist(edge_list)
test = graph_from_edgelist(edge_list)
plot(test)
View(test)
plot(test, layout=layout_with_kk, vertex.color="green")
plot(test, vertex.size=10, vertex.label=NA)
View(g)
g.degree
g$degree
#Building the network in python
n = 100
gamma = 3
gamma_list = seq(gamma-0.3,gamma+0.3,0.01)
results = integer(length(gamma_list))
graphs = list()
for(n in 1:100){
for(i in 1:length(gamma_list)){
#print(i)
series = power_law_series(n,i)
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results[i] = results[i]+result
}
}
source("~/Documents/GitHub/Project/configuration_model.r")
series = power_law_series(n,i)
n = 100
gamma = 3
gamma_list = seq(gamma-0.3,gamma+0.3,0.01)
results = integer(length(gamma_list))
graphs = list()
for(niter in 1:100){
for(i in 1:length(gamma_list)){
#print(i)
series = power_law_series(n,gamma_list[i])
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results[i] = results[i]+result
}
}
results
n
i
niter
gamma_list[61]
source("~/Documents/GitHub/Project/configuration_model.r")
n = 100
gamma = 3
gamma_list = seq(gamma-0.3,gamma+0.3,0.01)
results = integer(length(gamma_list))
graphs = list()
for(niter in 1:100){
for(i in 1:length(gamma_list)){
#print(i)
series = power_law_series(n,gamma_list[i])
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results[i] = results[i]+result
}
}
#Building the network in python
n = 100
gamma = 3
gamma_list = seq(gamma-0.3,gamma+0.3,0.01)
results = integer(length(gamma_list))
graphs = list()
for(niter in 1:1){
for(i in 1:length(gamma_list)){
#print(i)
series = power_law_series(n,gamma_list[i])
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results[i] = results[i]+result
}
}
n = 100
gamma = 3
gamma_list = seq(gamma-0.3,gamma+0.3,0.01)
results = integer(length(gamma_list))
graphs = list()
for(niter in 1:1){
for(i in 1:length(gamma_list)){
#print(i)
series = power_law_series(n,gamma_list[i])
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results[i] = results[i]+result
}
}
gc()
source("~/Documents/GitHub/Project/configuration_model.r")
library("reticulate")
library("igraph")
use_python("/zhaoy/anaconda3")
#function1 return the edges list to build the network in networkx
#function2 return the graph itself for testing in the R environment
configuration_model <- function(series){
g <- sample_degseq(series, method="vl")
return(as_edgelist(g))
}
return_graph<- function(series){
g <- sample_degseq(series, method="vl")
return(g)
}
#python functions
power_law_generator = source_python("power_law_series.py")
construct_network = source_python("construct_network.py")
cx = source_python("MAri.py")
#Building the network in python
n = 100
gamma = 3
gamma_list = seq(gamma-0.3,gamma+0.3,0.01)
results = integer(length(gamma_list))
graphs = list()
for(niter in 1:1){
for(i in 1:length(gamma_list)){
#print(i)
series = power_law_series(n,gamma_list[i])
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results[i] = results[i]+result
}
}
#Calculating the complexity
#OdC(g)
plot(gamma_list,results)
title("MAri")
for(niter in 1:50){
for(i in 1:length(gamma_list)){
#print(i)
series = power_law_series(n,gamma_list[i])
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results[i] = results[i]+result
}
}
results
plot(gamma_list,results)
title("MAri")
normal_results = list()
for(item in results){
append(normal_results,item/50)
}
normal_results = results/50
plot(gamma_list,normal_results)
xaxis("gamma")
normal_results = results/niter
plot(gamma_list,normal_results,title = "MAri",xlab = "gamma",ylab = "MAri Complexity")
plot(gamma_list,normal_results,main = "MAri",xlab = "gamma",ylab = "MAri Complexity")
warnings()
plot(gamma_list,normal_results,main = "MAri",xlab = "gamma",ylab = "MAri Complexity")
#include necessary libraries, and setting up the environment
library("reticulate")
library("igraph")
use_python("/zhaoy/anaconda3")
#function1 return the edges list to build the network in networkx
#function2 return the graph itself for testing in the R environment
configuration_model <- function(series){
g <- sample_degseq(series, method="vl")
return(as_edgelist(g))
}
return_graph<- function(series){
g <- sample_degseq(series, method="vl")
return(g)
}
#python functions
power_law_generator = source_python("power_law_series.py")
construct_network = source_python("construct_network.py")
cx = source_python("MAri.py")
#Building the network in python
n = 100
gamma = 3
gamma_list = seq(gamma-0.3,gamma+0.3,0.01)
results = integer(length(gamma_list))
graphs = list()
for(niter in 1:50){
for(i in 1:length(gamma_list)){
#print(i)
series = power_law_series(n,gamma_list[i])
if(sum(series)%%2 !=0){
series[1]=series[1]+1
}
edge_list = configuration_model(series)
g = construct_network(edge_list)
graphs = append(graphs,g)
result =   MAri(g)
results[i] = results[i]+result
}
}
normal_results = results/niter
plot(gamma_list,normal_results,main = "MAri",xlab = "gamma",ylab = "MAri Complexity")
